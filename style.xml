<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--
  Checkstyle configuration that checks the sun coding conventions from:
    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html
    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/
    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html
    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html
    - some best practices

  Modifications made by @miabelar
-->

<module name="Checker">
    <property name="fileExtensions" value="java"/>

    <module name="FileTabCharacter">
      <message key="file.containsTab" value="Line contains tab character"/>
      <property name="severity" value="error"/>
    </module>

    <!-- detection of public helper methods -->
    <module name="RegexpMultiline">
       <property name="format" value="(?&lt;!Override\s{16}|Override\s{15}|Override\s{14}|Override\s{13}|Override\s{12}|Override\s{11}|Override\s{10}|Override\s{9}|Override\s{7}|Override\s{6}|Override\s{5}|Override\s{4}|Override\s{3}|Override\s{2}|Override\s{1})public ([^\s]+) [^\s]+?(?=\()"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Helper method is public, or public method needs @Override"/>
       <property name="severity" value="error"/>
    </module>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <!--<module name="RegexpSingleline">
       <property name="format" value="System.out.print"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="File contains print statement"/>
       <property name="severity" value="error"/>
    </module>-->
    
    <module name="RegexpSingleline">
        <property name="format" value=" assertEquals\(true"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Should use assertTrue instead"/>
        <property name="severity" value="error"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="assertTrue\(Arrays.deepEquals"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Use assertArrayEquals() instead"/>
        <property name="severity" value="error"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="assertTrue\([^,]+.equals"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Use assertEquals() instead"/>
        <property name="severity" value="error"/>
    </module>
    
    <module name="RegexpSingleline">
        <property name="format" value=" assertEquals\(false"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Should use assertFalse instead"/>
        <property name="severity" value="error"/>
    </module>
    
    <module name="RegexpSingleline">
        <property name="format" value=" assertEquals\(null"/>
        <property name="minimum" value="0"/>
        <property name="maximum" value="0"/>
        <property name="message" value="Should use assertNull instead"/>
        <property name="severity" value="error"/>
    </module>

    <!--
    <module name="RegexpSingleline">
       <property name="format" value="assertEquals\([^,]+,\s* ([-0-9]|[\&quot;]|[\']|\.|true|false+)"/>
       <property name="minimum" value="0"/>
       <property name="severity" value="error"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Incorrect assertEquals format. Should be assertEquals(expected, actual)"/>
    </module>
    -->

	<!-- detects assertTrue(var1==var2) -->
    <module name="RegexpSingleline">
       <property name="format" value="assertTrue([^,]+==[^,]+)"/>
       <property name="minimum" value="0"/>
       <property name="severity" value="error"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Use assertEquals() instead"/>
    </module>

    <!-- only check test files -->
    <module name="SuppressionSingleFilter">
      <property name="checks" value="JavadocMethod"/>
      <property name="files" value=".+Test.java"/>
    </module>

    <module name="SuppressionSingleFilter">
      <property name="checks" value="RegexpMultiline"/>
      <property name="files" value=".+Test.java"/>
    </module>

    <module name="SuppressionSingleFilter">
      <property name="checks" value="RegexpMultiline"/>
      <property name="files" value=".*(?&lt;!Impl.java)$"/>
    </module>

    <module name="TreeWalker">

        <module name="Indentation">
          <property name="forceStrictCondition" value="false"/>
          <property name="severity" value="error"/>
        </module>

        <!-- camel case check -->
        <module name="AbbreviationAsWordInName">
          <property name="tokens" value="VARIABLE_DEF"/>
          <property name="allowedAbbreviationLength" value="2"/>
          <property name="severity" value="error"/>
          <message key="abbreviation.as.word" value="invalid variable or class naming convention"/>
        </module>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
          <property name="severity" value="error"/>
        </module>
        <module name="LocalVariableName">
          <property name="severity" value="error"/>
        </module>
        <module name="MemberName">
          <property name="severity" value="error"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="severity" value="error"/>
        </module>
        <module name="MethodName">
          <property name="severity" value="error"/>
          <message key="name.invalidPattern" value="invalid method naming convention"/>
        </module>
        <module name="ParameterName">
          <property name="severity" value="error"/>
        </module>
        <module name="StaticVariableName">
          <property name="severity" value="error"/>
        </module>
        <module name="TypeName">
          <property name="severity" value="error"/>
        </module>

        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="RedundantImport">
          <property name="severity" value="error"/>
        </module>
        <module name="UnusedImports">
            <property name="processJavadoc" value="false"/>
            <property name="severity" value="error"/>
        </module>

        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <module name="LineLength">
          <property name="max" value="100"/>
		  <property name="severity" value="error"/>
        </module>

        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="EmptyBlock">
          <property name="severity" value="error"/>
        </module>
        <module name="LeftCurly">
          <property name="severity" value="error"/>
        </module>
        <module name="RightCurly">
          <property name="severity" value="error"/>
        </module>
        <module name="NeedBraces">
          <property name="severity" value="error"/>
        </module>

        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <module name="EmptyStatement">
          <property name="severity" value="error"/>
        </module>
        <module name="MissingSwitchDefault">
          <property name="severity" value="error"/>
        </module>
        <module name="FallThrough">
          <property name="severity" value="error"/>
          <message key="fall.through" value="Case missing a break statement"/>
          <message key="fall.through.last" value="Case missing a break statement"/>
        </module>
        <module name="SimplifyBooleanExpression">
          <property name="severity" value="error"/>
        </module>
        <module name="SimplifyBooleanReturn">
          <property name="severity" value="error"/>
        </module>
        <module name="OneStatementPerLine">
          <property name="severity" value="error"/>
        </module>

        <!-- White space -->
        <module name="MethodParamPad">
          <property name="severity" value="error"/>
        </module>
        <module name="ParenPad">
          <property name="severity" value="error"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="severity" value="error"/>
            <message key="ws.notFollowed"
            value="WhitespaceAround: ''{0}'' is not followed by whitespace."/>
            <message key="ws.notPreceded"
            value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>


        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <module name="VisibilityModifier">
          <property name="severity" value="error"/>
		  <property name="packageAllowed" value="true"/>
		  <property name="protectedAllowed" value="true"/>
        </module>

        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle">
          <property name="severity" value="error"/>
        </module>
        <module name="TodoComment">
          <property name="severity" value="error"/>
        </module>

    </module>

</module>
